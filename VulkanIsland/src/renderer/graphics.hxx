#pragma once

#include <boost/functional/hash_fwd.hpp>


namespace graphics
{
    template<class T>
    struct hash;

    enum class PRIMITIVE_TOPOLOGY {
        POINTS = 0,
        LINES, LINE_STRIP,
        TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN
    };

    enum class PIPELINE_SHADER_STAGE {
        VERTEX = 0x01,
        TESS_CONTROL = 0x02,
        TESS_EVAL = 0x04,
        GEOMETRY = 0x08,
        FRAGMENT = 0x10,
        COMPUTE = 0x20,

        ALL_GRAPHICS = VERTEX | TESS_CONTROL | TESS_EVAL | GEOMETRY | FRAGMENT,
        ALL = VERTEX | TESS_CONTROL | TESS_EVAL | GEOMETRY | FRAGMENT | COMPUTE
    };

    enum class DESCRIPTOR_TYPE {
        SAMPLER = 0,
        COMBINED_IMAGE_SAMPLER,
        SAMPLED_IMAGE,
        STORAGE_IMAGE,
        UNIFORM_TEXEL_BUFFER,
        STORAGE_TEXEL_BUFFER,
        UNIFORM_BUFFER,
        STORAGE_BUFFER,
        UNIFORM_BUFFER_DYNAMIC,
        STORAGE_BUFFER_DYNAMIC,
        INPUT_ATTACHMENT
    };

    enum class CULL_MODE {
        NONE, FRONT, BACK, FRONT_AND_BACK = FRONT | BACK
    };

    enum class POLYGON_FRONT_FACE {
        COUNTER_CLOCKWISE, CLOCKWISE
    };

    enum class POLYGON_MODE {
        FILL, LINE, POINT
    };

    enum class COMPARE_OPERATION {
        NEVER,
        LESS,
        EQUAL,
        LESS_OR_EQUAL,
        GREATER,
        NOT_EQUAL,
        GREATER_OR_EQUAL,
        ALWAYS
    };

    enum class BLEND_STATE_OPERATION {
        CLEAR,
        AND,
        AND_REVERSE,
        COPY,
        AND_INVERTED,
        NO_OP,
        XOR,
        OR,
        NOR,
        EQUIVALENT,
        INVERT,
        OR_REVERSE,
        COPY_INVERTED,
        OR_INVERTED,
        NAND,
        SET
    };

    enum class BLEND_FACTOR {
        ZERO,
        ONE,
        SRC_COLOR,
        ONE_MINUS_SRC_COLOR,
        DST_COLOR,
        ONE_MINUS_DST_COLOR,
        SRC_ALPHA,
        ONE_MINUS_SRC_ALPHA,
        DST_ALPHA,
        ONE_MINUS_DST_ALPHA,
        CONSTANT_COLOR,
        ONE_MINUS_CONSTANT_COLOR,
        CONSTANT_ALPHA,
        ONE_MINUS_CONSTANT_ALPHA,
        SRC_ALPHA_SATURATE,
        SRC1_COLOR,
        ONE_MINUS_SRC1_COLOR,
        SRC1_ALPHA,
        ONE_MINUS_SRC1_ALPHA
    };

    enum class BLEND_OPERATION {
        ADD,
        SUBTRACT
    };

    enum class COLOR_COMPONENT {
        R = 0x01,
        G = 0x02,
        B = 0x04,
        A = 0x08,

        RGB = R | G | B,
        RGBA = R | G | B | A
    };

    enum class IMAGE_LAYOUT {
        UNDEFINED = 0,
        GENERAL,
        COLOR_ATTACHMENT,
        DEPTH_STENCIL_ATTACHMENT,
        DEPTH_STENCIL_READ_ONLY,
        SHADER_READ_ONLY,
        TRANSFER_SOURCE,
        TRANSFER_DESTINATION,
        PREINITIALIZED,
        DEPTH_READ_ONLY_STENCIL_ATTACHMENT,
        DEPTH_ATTACHMENT_STENCIL_READ_ONLY
    };

    enum class IMAGE_TILING {
        OPTIMAL = 0,
        LINEAR
    };

    enum class FORMAT {
        UNDEFINED = 0,

        RG4_UNORM_PACK8,
        RGBA4_UNORM_PACK16,
        BGRA4_UNORM_PACK16,
        B5G6R5_UNORM_PACK16,
        RGB5A1_UNORM_PACK16,
        BGR5A1_UNORM_PACK16,
        E5BGR9_UFLOAT_PACK32,

        R5G6B5_UNORM_PACK16,
        A1RGB5_UNORM_PACK16,

        R8_UNORM,
        R8_SNORM,
        RG8_UNORM,
        RG8_SNORM,
        RGBA8_UNORM,
        RGBA8_SNORM,
        BGRA8_UNORM,
        ABGR8_UNORM_PACK32,
        ABGR8_SNORM_PACK32,
        A2BGR10_UNORM_PACK32,
        R16_UNORM,
        R16_SNORM,
        R16_SFLOAT,
        RG16_UNORM,
        RG16_SNORM,
        RG16_SFLOAT,
        RGBA16_UNORM,
        RGBA16_SNORM,
        RGBA16_SFLOAT,
        RG32_SFLOAT,
        RGBA32_SFLOAT,
        B10GR11_UFLOAT_PACK32,

        R8_USCALED,
        R8_SSCALED,
        RG8_USCALED,
        RG8_SSCALED,
        RGB8_UNORM,
        RGB8_SNORM,
        RGB8_USCALED,
        RGB8_SSCALED,
        RGB8_UINT,
        RGB8_SINT,
        BGR8_UNORM,
        BGR8_SNORM,
        BGR8_USCALED,
        BGR8_SSCALED,
        BGR8_UINT,
        BGR8_SINT,
        RGBA8_USCALED,
        RGBA8_SSCALED,
        BGRA8_USCALED,
        BGRA8_SSCALED,
        ABGR8_USCALED_PACK32,
        ABGR8_SSCALED_PACK32,
        A2RGB10_SNORM_PACK32,
        A2RGB10_USCALED_PACK32,
        A2RGB10_SSCALED_PACK32,
        A2RGB10_SINT_PACK32,
        A2BGR10_SNORM_PACK32,
        A2BGR10_USCALED_PACK32,
        A2BGR10_SSCALED_PACK32,
        A2BGR10_SINT_PACK32,
        R16_USCALED,
        R16_SSCALED,
        RG16_USCALED,
        RG16_SSCALED,
        RGB16_UNORM,
        RGB16_SNORM,
        RGB16_USCALED,
        RGB16_SSCALED,
        RGB16_UINT,
        RGB16_SINT,
        RGB16_SFLOAT,
        RGBA16_USCALED,
        RGBA16_SSCALED,
        R64_UINT,
        R64_SINT,
        R64_SFLOAT,
        RG64_UINT,
        RG64_SINT,
        RG64_SFLOAT,
        RGB64_UINT,
        RGB64_SINT,
        RGB64_SFLOAT,
        RGBA64_UINT,
        RGBA64_SINT,
        RGBA64_SFLOAT,

        R8_UINT,
        R8_SINT,
        RG8_UINT,
        RG8_SINT,
        RGBA8_UINT,
        RGBA8_SINT,
        ABGR8_UINT_PACK32,
        ABGR8_SINT_PACK32,
        A2BGR10_UINT_PACK32,
        R16_UINT,
        R16_SINT,
        RG16_UINT,
        RG16_SINT,
        RGBA16_UINT,
        RGBA16_SINT,
        RG32_UINT,
        RG32_SINT,
        RGBA32_UINT,
        RGBA32_SINT,

        R8_SRGB,
        BC1_RGB_UNORM_BLOCK,
        BC1_RGB_SRGB_BLOCK,
        BC1_RGBA_UNORM_BLOCK,
        BC1_RGBA_SRGB_BLOCK,
        BC2_UNORM_BLOCK,
        BC2_SRGB_BLOCK,
        BC3_UNORM_BLOCK,
        BC3_SRGB_BLOCK,
        BC4_UNORM_BLOCK,
        BC4_SNORM_BLOCK,
        BC5_UNORM_BLOCK,
        BC5_SNORM_BLOCK,
        BC6H_UFLOAT_BLOCK,
        BC6H_SFLOAT_BLOCK,
        BC7_UNORM_BLOCK,
        BC7_SRGB_BLOCK,

        RGBA8_SRGB,
        BGRA8_SRGB,
        ABGR8_SRGB_PACK32,

        BGRA8_SNORM,

        BGRA8_UINT,
        BGRA8_SINT,
        A2RGB10_UINT_PACK32,

        A2RGB10_UNORM_PACK32,

        R32_UINT,
        R32_SINT,

        R32_SFLOAT,

        RGB32_UINT,
        RGB32_SINT,

        RGB32_SFLOAT,

        D16_UNORM,
        X8_D24_UNORM_PACK32,
        D32_SFLOAT,
        D24_UNORM_S8_UINT,
        D32_SFLOAT_S8_UINT,

        GBGR8_422_UNORM,
        BGRG8_422_UNORM,
        GBGR10X6_422_UNORM_4PACK16,
        BGRG10X6_422_UNORM_4PACK16,
        GBGR12X4_422_UNORM_4PACK16,
        BGRG12X4_422_UNORM_4PACK16,
        GBGR16_422_UNORM,
        BGRG16_422_UNORM,

        G8_B8_R8_3PLANE_420_UNORM,
        G8_B8R8_2PLANE_420_UNORM,
        G8_B8_R8_3PLANE_422_UNORM,
        G8_B8R8_2PLANE_422_UNORM,
        G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16,
        G10X6_BR10X6_2PLANE_420_UNORM_3PACK16,
        G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16,
        G10X6_BR10X6_2PLANE_422_UNORM_3PACK16,
        G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16,
        G12X4_BR12X4_2PLANE_420_UNORM_3PACK16,
        G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16,
        G12X4_BR12X4_2PLANE_422_UNORM_3PACK16,
        G16_B16_R16_3PLANE_420_UNORM,
        G16_BR16_2PLANE_420_UNORM,
        G16_B16_R16_3PLANE_422_UNORM,
        G16_BR16_2PLANE_422_UNORM,

        G8_B8_R8_3PLANE_444_UNORM,
        G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16,
        G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16,
        G16_B16_R16_3PLANE_444_UNORM,

        R10X6_UNORM_PACK16,
        RG10X6_UNORM_2PACK16,
        RGBA10X6_UNORM_4PACK16,
        R12X4_UNORM_PACK16,
        RG12X4_UNORM_2PACK16,
        RGBA12X4_UNORM_4PACK16
    };
}
